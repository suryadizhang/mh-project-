name: Reusable Component Workflow
description: "Reusable workflow for building, testing, and packaging components"

on:
  workflow_call:
    inputs:
      component:
        description: "Component name (api, ai-api, admin, customer)"
        required: true
        type: string
      image_tag:
        description: "Docker image tag"
        required: false
        type: string
        default: ${{ github.sha }}
      deploy:
        description: "Whether to deploy this component"
        required: false
        type: boolean
        default: false
    outputs:
      image:
        description: "Built Docker image name"
        value: ${{ jobs.build.outputs.image }}
      success:
        description: "Whether the build succeeded"
        value: ${{ jobs.build.outputs.success }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      success: ${{ steps.build-result.outputs.success }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Component Info
        run: |
          echo "🏗️ Building component: ${{ inputs.component }}"
          echo "🏷️ Image tag: ${{ inputs.image_tag }}"
          echo "🚀 Deploy: ${{ inputs.deploy }}"

      # Setup Node.js for frontend components
      - name: Setup Node.js
        if: inputs.component == 'admin' || inputs.component == 'customer'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            myhibachi-admin-frontend/package-lock.json
            myhibachi-frontend/package-lock.json

      # Setup Python for backend components
      - name: Setup Python
        if: inputs.component == 'api' || inputs.component == 'ai-api'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            myhibachi-backend-fastapi/requirements.txt
            myhibachi-backend/requirements.txt
            myhibachi-ai-backend/requirements.txt

      # Install dependencies - Admin Frontend
      - name: Install Admin dependencies
        if: inputs.component == 'admin'
        working-directory: ./myhibachi-admin-frontend
        run: |
          npm ci --include-optional

      # Install dependencies - Customer Frontend
      - name: Install Customer dependencies
        if: inputs.component == 'customer'
        working-directory: ./myhibachi-frontend
        run: |
          npm ci --include-optional

      # Install dependencies - API Backend
      - name: Install API dependencies
        if: inputs.component == 'api'
        run: |
          cd myhibachi-backend-fastapi && pip install -r requirements.txt
          cd ../myhibachi-backend && pip install -r requirements.txt

      # Install dependencies - AI API Backend
      - name: Install AI API dependencies
        if: inputs.component == 'ai-api'
        working-directory: ./myhibachi-ai-backend
        run: |
          pip install -r requirements.txt

      # Lint and Test - Admin Frontend
      - name: Lint and Test Admin
        if: inputs.component == 'admin'
        working-directory: ./myhibachi-admin-frontend
        run: |
          npm run lint
          npm run type-check
          npm run test --if-present

      # Lint and Test - Customer Frontend
      - name: Lint and Test Customer
        if: inputs.component == 'customer'
        working-directory: ./myhibachi-frontend
        run: |
          npm run lint
          npm run type-check
          npm run test --if-present

      # Lint and Test - API Backend
      - name: Lint and Test API
        if: inputs.component == 'api'
        run: |
          cd myhibachi-backend-fastapi
          python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          python -m pytest tests/ -v --tb=short || echo "Tests not found or failed"
          cd ../myhibachi-backend
          python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          python -m pytest tests/ -v --tb=short || echo "Tests not found or failed"

      # Lint and Test - AI API Backend
      - name: Lint and Test AI API
        if: inputs.component == 'ai-api'
        working-directory: ./myhibachi-ai-backend
        run: |
          python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          python -m pytest tests/ -v --tb=short || echo "Tests not found or failed"
          python -c "from app.main import app; print('✅ AI API imports successfully')"

      # Build - Admin Frontend
      - name: Build Admin
        if: inputs.component == 'admin'
        working-directory: ./myhibachi-admin-frontend
        run: |
          npm run build
          echo "✅ Admin frontend built successfully"

      # Build - Customer Frontend
      - name: Build Customer
        if: inputs.component == 'customer'
        working-directory: ./myhibachi-frontend
        run: |
          npm run build
          echo "✅ Customer frontend built successfully"

      # Docker setup
      - name: Log in to Container Registry
        if: env.ACT != 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ inputs.component }}
            type=ref,event=pr,suffix=-${{ inputs.component }}
            type=sha,format=long,suffix=-${{ inputs.component }}
            type=raw,value=${{ inputs.image_tag }}-${{ inputs.component }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.component == 'admin' && './myhibachi-admin-frontend/Dockerfile' || inputs.component == 'customer' && './myhibachi-frontend/Dockerfile' || inputs.component == 'api' && './myhibachi-backend-fastapi/Dockerfile' || inputs.component == 'ai-api' && './myhibachi-ai-backend/Dockerfile' || './Dockerfile' }}
          platforms: linux/amd64
          push: ${{ env.ACT != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ inputs.component }}
          cache-to: type=gha,mode=max,scope=${{ inputs.component }}

      - name: Build Result
        id: build-result
        run: |
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ Component ${{ inputs.component }} built successfully!"

      # Upload artifacts on failure
      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ inputs.component }}-${{ github.run_id }}
          path: |
            myhibachi-*/npm-debug.log*
            myhibachi-*/yarn-error.log*
            myhibachi-*/.next/
            **/*.log
          retention-days: 7
