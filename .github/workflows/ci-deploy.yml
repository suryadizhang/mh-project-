name: 🚀 Change-Aware CI/CD

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.vscode/**'
      - '.gitignore'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.vscode/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy all components'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20.11.1'
  PYTHON_VERSION: '3.11.8'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # Detect Changes
  # =============================================================================
  detect:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      api: ${{ steps.filter.outputs.api }}
      ai-api: ${{ steps.filter.outputs.ai-api }}
      admin: ${{ steps.filter.outputs.admin }}
      customer: ${{ steps.filter.outputs.customer }}
      shared: ${{ steps.filter.outputs.shared }}
      matrix: ${{ steps.matrix.outputs.components }}
      has-changes: ${{ steps.matrix.outputs.has-changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changed paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api:
              - 'apps/api/**'
            ai-api:
              - 'apps/ai-api/**'
            admin:
              - 'apps/admin/**'
            customer:
              - 'apps/customer/**'
            shared:
              - 'packages/**'
              - 'tsconfig*.json'
              - 'Dockerfile'
              - 'docker-compose*.yml'
              - 'package.json'
              - 'package-lock.json'
              - '.github/workflows/**'

      - name: Build component matrix
        id: matrix
        run: |
          components='[]'
          has_changes=false
          
          # Force deploy all components
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            components='["api", "ai-api", "admin", "customer"]'
            has_changes=true
            echo "🚀 Force deploying all components"
          else
            # Add components based on changes
            if [[ "${{ steps.filter.outputs.api }}" == "true" || "${{ steps.filter.outputs.shared }}" == "true" ]]; then
              components=$(echo "$components" | jq '. + ["api"]')
              has_changes=true
              echo "🔧 API changes detected"
            fi
            
            if [[ "${{ steps.filter.outputs.ai-api }}" == "true" || "${{ steps.filter.outputs.shared }}" == "true" ]]; then
              components=$(echo "$components" | jq '. + ["ai-api"]')
              has_changes=true
              echo "🤖 AI API changes detected"
            fi
            
            if [[ "${{ steps.filter.outputs.admin }}" == "true" || "${{ steps.filter.outputs.shared }}" == "true" ]]; then
              components=$(echo "$components" | jq '. + ["admin"]')
              has_changes=true
              echo "⚙️ Admin changes detected"
            fi
            
            if [[ "${{ steps.filter.outputs.customer }}" == "true" || "${{ steps.filter.outputs.shared }}" == "true" ]]; then
              components=$(echo "$components" | jq '. + ["customer"]')
              has_changes=true
              echo "🛒 Customer changes detected"
            fi
          fi
          
          echo "components=$components" >> $GITHUB_OUTPUT
          echo "has-changes=$has_changes" >> $GITHUB_OUTPUT
          echo "📊 Final matrix: $components"

  # =============================================================================
  # Build, Test & Deploy Components
  # =============================================================================
  build_test_deploy:
    needs: detect
    if: needs.detect.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        component: ${{ fromJson(needs.detect.outputs.matrix) }}
    
    env:
      COMPONENT: ${{ matrix.component }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup toolchain based on component type
      - name: Setup Node.js (Frontend)
        if: contains(fromJson('["admin", "customer"]'), matrix.component)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python (Backend)
        if: contains(fromJson('["api", "ai-api"]'), matrix.component)
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'apps/${{ matrix.component }}/requirements.txt'

      # Install dependencies
      - name: Install dependencies (Frontend)
        if: contains(fromJson('["admin", "customer"]'), matrix.component)
        run: npm ci

      - name: Install dependencies (Backend)
        if: contains(fromJson('["api", "ai-api"]'), matrix.component)
        run: |
          cd apps/${{ matrix.component }}
          pip install -r requirements.txt

      # Run checks
      - name: Run typecheck (Frontend)
        if: contains(fromJson('["admin", "customer"]'), matrix.component)
        run: |
          cd apps/${{ matrix.component }}
          npm run typecheck

      - name: Run lint (Frontend)
        if: contains(fromJson('["admin", "customer"]'), matrix.component)
        run: |
          cd apps/${{ matrix.component }}
          npm run lint

      - name: Run tests (Frontend)
        if: contains(fromJson('["admin", "customer"]'), matrix.component)
        run: |
          cd apps/${{ matrix.component }}
          npm run test -- --passWithNoTests

      - name: Run lint (Backend)
        if: contains(fromJson('["api", "ai-api"]'), matrix.component)
        run: |
          cd apps/${{ matrix.component }}
          ruff check .
          black --check .

      - name: Run tests (Backend)
        if: contains(fromJson('["api", "ai-api"]'), matrix.component)
        run: |
          cd apps/${{ matrix.component }}
          if [[ -f "test_*.py" ]] || [[ -d "tests/" ]]; then
            pytest -v
          else
            echo "⚠️ No tests found for ${{ matrix.component }}"
          fi

      # Build component
      - name: Build Next.js (Frontend)
        if: contains(fromJson('["admin", "customer"]'), matrix.component)
        run: |
          cd apps/${{ matrix.component }}
          npm run build

      - name: Verify Next.js standalone build
        if: contains(fromJson('["admin", "customer"]'), matrix.component)
        run: |
          cd apps/${{ matrix.component }}
          if [[ -f ".next/standalone/server.js" ]]; then
            echo "✅ Next.js standalone server.js found"
            ls -la .next/standalone/
          else
            echo "❌ Next.js standalone build failed"
            echo "Directory contents:"
            find .next -name "*.js" -type f | head -10
            exit 1
          fi

      # Docker build and push
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request' && env.ACT != 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.component }}
            type=ref,event=pr,suffix=-${{ matrix.component }}
            type=sha,suffix=-${{ matrix.component }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            COMPONENT=${{ matrix.component }}
          push: ${{ github.event_name != 'pull_request' && env.ACT != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Deployment (only on push to main)
      - name: Deploy to VPS
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && env.ACT != 'true'
        env:
          IMAGE_TAG: ${{ github.sha }}-${{ matrix.component }}
        run: |
          echo "🚀 Deploying ${{ matrix.component }} to VPS"
          
          # Validate secrets
          if [[ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]]; then
            echo "❌ SSH_PRIVATE_KEY secret required"
            exit 1
          fi
          if [[ -z "${{ secrets.VPS_HOST }}" ]]; then
            echo "❌ VPS_HOST secret required"
            exit 1
          fi
          
          # Setup SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p ${{ secrets.SSH_PORT || '22' }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          
          # Extract runtime from Docker image
          echo "📦 Extracting runtime for ${{ matrix.component }}"
          docker create --name temp_container ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          docker cp temp_container:/app ./extracted
          docker rm temp_container
          
          # Deploy to VPS
          echo "🚀 Deploying to /srv/${{ matrix.component }}"
          
          # Create atomic deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          COMPONENT="${{ matrix.component }}"
          RELEASE_DIR="/srv/${COMPONENT}/releases/${{ github.sha }}"
          CURRENT_DIR="/srv/${COMPONENT}/current"
          
          # Create release directory
          sudo mkdir -p "${RELEASE_DIR}"
          
          # Backup current if exists
          if [[ -L "${CURRENT_DIR}" ]]; then
            BACKUP_DIR="/srv/${COMPONENT}/backup"
            sudo rm -rf "${BACKUP_DIR}"
            sudo cp -r "${CURRENT_DIR}" "${BACKUP_DIR}"
          fi
          
          # Deploy new version
          sudo rsync -av --delete ./extracted/ "${RELEASE_DIR}/"
          sudo ln -sfn "${RELEASE_DIR}" "${CURRENT_DIR}"
          
          # Restart service
          sudo systemctl restart ${COMPONENT} || true
          sudo systemctl enable ${COMPONENT} || true
          
          echo "✅ Deployment completed"
          EOF
          
          chmod +x deploy.sh
          
          # Upload and execute
          rsync -avz -e "ssh -i ~/.ssh/deploy_key -p ${{ secrets.SSH_PORT || '22' }}" ./extracted deploy.sh ${{ secrets.DEPLOY_USER || 'deployer' }}@${{ secrets.VPS_HOST }}:/tmp/
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.SSH_PORT || '22' }} ${{ secrets.DEPLOY_USER || 'deployer' }}@${{ secrets.VPS_HOST }} "cd /tmp && ./deploy.sh"

      # Health check after deployment
      - name: Health check
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && env.ACT != 'true'
        run: |
          echo "🏥 Health check for ${{ matrix.component }}"
          
          # Determine health URL
          case "${{ matrix.component }}" in
            "api")
              HEALTH_URL="https://${{ secrets.SITE_URL }}/api/health"
              ;;
            "ai-api")
              HEALTH_URL="https://${{ secrets.SITE_URL }}/ai/health"
              ;;
            "admin")
              HEALTH_URL="https://admin.${{ secrets.SITE_URL }}/healthz"
              ;;
            "customer")
              HEALTH_URL="https://${{ secrets.SITE_URL }}/healthz"
              ;;
          esac
          
          # Wait and retry health check
          for i in {1..10}; do
            echo "Attempt $i/10..."
            if curl -fsS --max-time 30 "$HEALTH_URL" > /dev/null 2>&1; then
              echo "✅ ${{ matrix.component }} is healthy!"
              exit 0
            fi
            echo "⏳ Waiting 30s before retry..."
            sleep 30
          done
          
          echo "❌ Health check failed for ${{ matrix.component }}"
          exit 1

      # Upload artifacts on failure
      - name: Upload failure artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-logs-${{ matrix.component }}
          path: |
            apps/${{ matrix.component }}/logs/
            apps/${{ matrix.component }}/.next/
          retention-days: 7

  # =============================================================================
  # Vercel Preview Deployments (for frontends)
  # =============================================================================
  vercel-preview:
    if: github.event_name == 'pull_request' && needs.detect.outputs.has-changes == 'true'
    needs: detect
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        include:
          - component: admin
            condition: ${{ contains(fromJson(needs.detect.outputs.matrix), 'admin') }}
          - component: customer  
            condition: ${{ contains(fromJson(needs.detect.outputs.matrix), 'customer') }}
    steps:
      - name: Skip if component not changed
        if: ${{ !matrix.condition }}
        run: |
          echo "Skipping ${{ matrix.component }} - no changes detected"
          exit 0

      - name: Checkout repository
        if: ${{ matrix.condition }}
        uses: actions/checkout@v4

      - name: Deploy to Vercel Preview
        if: ${{ matrix.condition }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ matrix.component == 'admin' && secrets.VERCEL_PROJECT_ID_ADMIN || secrets.VERCEL_PROJECT_ID_CUSTOMER }}
          working-directory: apps/${{ matrix.component }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # =============================================================================
  # Summary
  # =============================================================================
  summary:
    if: always()
    needs: [detect, build_test_deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changed Components" >> $GITHUB_STEP_SUMMARY
          echo "Matrix: ${{ needs.detect.outputs.matrix }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Detect**: ${{ needs.detect.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build/Test/Deploy**: ${{ needs.build_test_deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            echo "### 🌐 Live URLs" >> $GITHUB_STEP_SUMMARY
            echo "- **Customer**: https://${{ secrets.SITE_URL }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Admin**: https://admin.${{ secrets.SITE_URL }}" >> $GITHUB_STEP_SUMMARY
            echo "- **API**: https://${{ secrets.SITE_URL }}/api/health" >> $GITHUB_STEP_SUMMARY
          fi