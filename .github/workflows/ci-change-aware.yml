name: Change-Aware CI

on:
  push:
    branches: [main, api, ai-api, admin, customer]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.vscode/**'
      - '*.txt'
      - 'LICENSE'
  pull_request:
    branches: [main, api, ai-api, admin, customer]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.vscode/**'
      - '*.txt'
      - 'LICENSE'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Detect which components changed
  detect-changes:
    uses: ./.github/workflows/_filters.yml

  # Build component matrix based on changes
  build-matrix:
    runs-on: ubuntu-latest
    needs: detect-changes
    outputs:
      matrix: ${{ steps.matrix.outputs.components }}
      has-changes: ${{ steps.matrix.outputs.has-changes }}
    steps:
      - name: Build component matrix
        id: matrix
        run: |
          components='[]'
          has_changes=false

          # Check each component and shared dependencies
          if [[ "${{ needs.detect-changes.outputs.api }}" == "true" || "${{ needs.detect-changes.outputs.shared }}" == "true" ]]; then
            components=$(echo "$components" | jq '. + ["api"]')
            has_changes=true
            echo "✅ API component will be built"
          fi

          if [[ "${{ needs.detect-changes.outputs.ai_api }}" == "true" || "${{ needs.detect-changes.outputs.shared }}" == "true" ]]; then
            components=$(echo "$components" | jq '. + ["ai-api"]')
            has_changes=true
            echo "✅ AI API component will be built"
          fi

          if [[ "${{ needs.detect-changes.outputs.admin }}" == "true" || "${{ needs.detect-changes.outputs.shared }}" == "true" ]]; then
            components=$(echo "$components" | jq '. + ["admin"]')
            has_changes=true
            echo "✅ Admin component will be built"
          fi

          if [[ "${{ needs.detect-changes.outputs.customer }}" == "true" || "${{ needs.detect-changes.outputs.shared }}" == "true" ]]; then
            components=$(echo "$components" | jq '. + ["customer"]')
            has_changes=true
            echo "✅ Customer component will be built"
          fi

          echo "components=$components" >> $GITHUB_OUTPUT
          echo "has-changes=$has_changes" >> $GITHUB_OUTPUT

          echo "🎯 Final build matrix: $components"
          echo "📊 Has changes: $has_changes"

  # Build changed components in parallel
  build-components:
    if: needs.build-matrix.outputs.has-changes == 'true'
    needs: [detect-changes, build-matrix]
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    uses: ./.github/workflows/_reusable-component.yml
    with:
      component: ${{ matrix.component }}
      image_tag: ${{ github.sha }}
      deploy: false
    secrets: inherit

  # Security and Quality Gates
  security-scan:
    if: needs.build-matrix.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    needs: [detect-changes, build-matrix]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          echo "🔒 Running security scans..."

          # Check for AI backend isolation (only if AI backend changed)
          if [[ "${{ needs.detect-changes.outputs.ai_api }}" == "true" ]]; then
            echo "Checking AI backend isolation from payment processing..."

            # Look for payment processing violations
            violations=0

            if grep -r "stripe" myhibachi-ai-backend/ --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md" || true; then
              echo "❌ SECURITY VIOLATION: AI backend contains Stripe references"
              violations=$((violations + 1))
            fi

            if grep -r "payment.*process" myhibachi-ai-backend/ --exclude-dir=.git --exclude-dir=node_modules --exclude="*.md" || true; then
              echo "❌ SECURITY VIOLATION: AI backend contains payment processing code"
              violations=$((violations + 1))
            fi

            if [[ $violations -gt 0 ]]; then
              echo "❌ SECURITY VIOLATION: AI backend contains payment-related code"
              exit 1
            fi

            echo "✅ AI backend security check passed"
          fi

      # Python dependency vulnerability scan
      - name: Python Security Scan
        if: needs.detect-changes.outputs.api == 'true' || needs.detect-changes.outputs.ai_api == 'true'
        run: |
          pip install safety
          cd myhibachi-backend-fastapi && safety check --short-report || echo "⚠️ Vulnerabilities found in API backend"
          cd ../myhibachi-ai-backend && safety check --short-report || echo "⚠️ Vulnerabilities found in AI backend"

      # Node.js dependency vulnerability scan
      - name: Node.js Security Scan
        if: needs.detect-changes.outputs.admin == 'true' || needs.detect-changes.outputs.customer == 'true'
        run: |
          if [[ "${{ needs.detect-changes.outputs.admin }}" == "true" ]]; then
            cd myhibachi-admin-frontend && npm audit --audit-level=high || echo "⚠️ Vulnerabilities found in Admin frontend"
          fi
          if [[ "${{ needs.detect-changes.outputs.customer }}" == "true" ]]; then
            cd myhibachi-frontend && npm audit --audit-level=high || echo "⚠️ Vulnerabilities found in Customer frontend"
          fi

  # Integration tests (only run on main branch)
  integration-tests:
    if: github.ref == 'refs/heads/main' && needs.build-matrix.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    needs: [build-components]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          echo "🧪 Setting up integration test environment..."
          # Add docker-compose setup for integration tests
          echo "Integration tests would run here"

      - name: Run integration tests
        run: |
          echo "🚀 Running integration tests..."
          echo "Tests would verify component interactions"

  # Report build results
  build-summary:
    if: always()
    runs-on: ubuntu-latest
    needs: [detect-changes, build-matrix, build-components, security-scan]
    steps:
      - name: Build Summary
        run: |
          echo "📊 **Change-Aware CI Summary**"
          echo ""
          echo "🔍 **Changes Detected:**"
          echo "- API: ${{ needs.detect-changes.outputs.api }}"
          echo "- AI API: ${{ needs.detect-changes.outputs.ai_api }}"
          echo "- Admin: ${{ needs.detect-changes.outputs.admin }}"
          echo "- Customer: ${{ needs.detect-changes.outputs.customer }}"
          echo "- Shared: ${{ needs.detect-changes.outputs.shared }}"
          echo ""
          echo "🏗️ **Components Built:** ${{ needs.build-matrix.outputs.matrix }}"
          echo "✅ **Build Status:** ${{ needs.build-components.result }}"
          echo "🔒 **Security Status:** ${{ needs.security-scan.result }}"
          echo ""
          if [[ "${{ needs.build-matrix.outputs.has-changes }}" == "false" ]]; then
            echo "ℹ️ No components changed - skipped builds"
          fi
