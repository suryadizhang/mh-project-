name: FastAPI Backend CI

on:
  push:
    paths:
      - 'myhibachi-backend-fastapi/**'
      - '.github/workflows/backend-fastapi.yml'
  pull_request:
    paths:
      - 'myhibachi-backend-fastapi/**'

defaults:
  run:
    working-directory: myhibachi-backend-fastapi

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_myhibachi
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: myhibachi-backend-fastapi/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup test environment
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_myhibachi
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_myhibachi" > .env
          echo "STRIPE_SECRET_KEY=sk_test_fake_key_for_testing" >> .env
          echo "STRIPE_WEBHOOK_SECRET=whsec_fake_secret_for_testing" >> .env

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_myhibachi
        run: |
          if [ -f "alembic.ini" ]; then
            alembic upgrade head
          else
            echo "No alembic.ini found, skipping migrations"
          fi

      - name: Run linting (ruff)
        run: |
          if command -v ruff &> /dev/null; then
            ruff check .
          else
            echo "Ruff not available, skipping linting"
          fi

      - name: Run type checking (mypy)
        run: |
          if command -v mypy &> /dev/null; then
            mypy app/ --ignore-missing-imports
          else
            echo "Mypy not available, skipping type checking"
          fi

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_myhibachi
        run: |
          if [ -d "tests" ] || [ -f "test_*.py" ]; then
            python -m pytest -v
          else
            echo "No tests found, skipping test execution"
          fi

      - name: Start application (health check)
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_myhibachi
        run: |
          timeout 30s python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          curl -f http://localhost:8000/health || curl -f http://localhost:8000/ || echo "Health check failed"

      - name: Run security audit
        run: |
          pip install safety
          safety check

      - name: Run guard checks
        run: |
          cd ..
          pip install colorama
          python guard.py
