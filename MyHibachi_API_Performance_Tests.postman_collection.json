{
  "info": {
    "name": "MyHibachi API Performance Tests",
    "description": "Comprehensive API tests for MEDIUM #34 optimizations:\n- Cursor-based pagination\n- CTE analytics queries\n- Performance validation\n- Load testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "myhibachi-performance-tests"
  },
  "item": [
    {
      "name": "Cursor Pagination",
      "item": [
        {
          "name": "Get First Page",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate response time",
                  "pm.test('Response time under 20ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(20);",
                  "});",
                  "",
                  "// Validate status code",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Validate response structure",
                  "pm.test('Has items array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('items');",
                  "    pm.expect(jsonData.items).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Has pagination metadata', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('has_next');",
                  "});",
                  "",
                  "// Save cursor for next request",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.next_cursor) {",
                  "    pm.collectionVariables.set('next_cursor', jsonData.next_cursor);",
                  "}",
                  "",
                  "// Save first page IDs for duplicate check",
                  "const itemIds = jsonData.items.map(item => item.id);",
                  "pm.collectionVariables.set('first_page_ids', JSON.stringify(itemIds));",
                  "",
                  "console.log(`✅ First page: ${jsonData.items.length} items, response time: ${pm.response.responseTime}ms`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/bookings?limit=20",
              "host": ["{{base_url}}"],
              "path": ["api", "bookings"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        },
        {
          "name": "Get Second Page (with cursor)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time under 20ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(20);",
                  "});",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('No duplicate items from first page', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const firstPageIds = JSON.parse(pm.collectionVariables.get('first_page_ids') || '[]');",
                  "    const secondPageIds = jsonData.items.map(item => item.id);",
                  "    ",
                  "    const duplicates = secondPageIds.filter(id => firstPageIds.includes(id));",
                  "    pm.expect(duplicates).to.have.lengthOf(0);",
                  "});",
                  "",
                  "pm.test('Has pagination metadata', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('prev_cursor').or.property('previous_cursor');",
                  "});",
                  "",
                  "console.log(`✅ Second page: ${pm.response.json().items.length} items, response time: ${pm.response.responseTime}ms`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/bookings?cursor={{next_cursor}}&limit=20",
              "host": ["{{base_url}}"],
              "path": ["api", "bookings"],
              "query": [
                {
                  "key": "cursor",
                  "value": "{{next_cursor}}"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        },
        {
          "name": "Backward Navigation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time under 20ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(20);",
                  "});",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "console.log(`✅ Backward navigation: ${pm.response.json().items.length} items, response time: ${pm.response.responseTime}ms`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/bookings?cursor={{next_cursor}}&direction=prev&limit=20",
              "host": ["{{base_url}}"],
              "path": ["api", "bookings"],
              "query": [
                {
                  "key": "cursor",
                  "value": "{{next_cursor}}"
                },
                {
                  "key": "direction",
                  "value": "prev"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "CTE Analytics",
      "item": [
        {
          "name": "Payment Analytics (30 days)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate response time (20x improvement: 200ms → 15ms)",
                  "pm.test('Response time under 15ms (20x improvement)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(15);",
                  "});",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('total_payments');",
                  "    pm.expect(jsonData).to.have.property('total_amount');",
                  "});",
                  "",
                  "pm.test('Total payments is positive', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.total_payments).to.be.at.least(0);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log(`✅ Payment Analytics: ${jsonData.total_payments} payments, $${jsonData.total_amount}, response time: ${pm.response.responseTime}ms`);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Calculate date range (last 30 days)",
                  "const endDate = new Date();",
                  "const startDate = new Date();",
                  "startDate.setDate(startDate.getDate() - 30);",
                  "",
                  "pm.collectionVariables.set('start_date', startDate.toISOString().split('T')[0]);",
                  "pm.collectionVariables.set('end_date', endDate.toISOString().split('T')[0]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/payments/analytics?start_date={{start_date}}&end_date={{end_date}}",
              "host": ["{{base_url}}"],
              "path": ["api", "payments", "analytics"],
              "query": [
                {
                  "key": "start_date",
                  "value": "{{start_date}}"
                },
                {
                  "key": "end_date",
                  "value": "{{end_date}}"
                }
              ]
            }
          }
        },
        {
          "name": "Booking KPIs",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate response time (25x improvement: 300ms → 17ms)",
                  "pm.test('Response time under 17ms (25x improvement)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(17);",
                  "});",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has booking metrics', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('total_bookings').or.property('bookings_count');",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "const bookings = jsonData.total_bookings || jsonData.bookings_count || 0;",
                  "console.log(`✅ Booking KPIs: ${bookings} bookings, response time: ${pm.response.responseTime}ms`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/admin/kpis",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "kpis"]
            }
          }
        },
        {
          "name": "Customer Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate response time (15x improvement: 250ms → 20ms)",
                  "pm.test('Response time under 20ms (15x improvement)', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(20);",
                  "});",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has customer metrics', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('total_bookings').or.property('bookings_count');",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "const bookings = jsonData.total_bookings || jsonData.bookings_count || 0;",
                  "console.log(`✅ Customer Analytics: ${bookings} bookings, response time: ${pm.response.responseTime}ms`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/admin/customer-analytics?customer_email={{test_customer_email}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "customer-analytics"],
              "query": [
                {
                  "key": "customer_email",
                  "value": "{{test_customer_email}}"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Performance Comparison",
      "item": [
        {
          "name": "Overall Performance Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validate overall improvement (10x minimum)",
                  "pm.test('Combined endpoints under 80ms (10x improvement)', function () {",
                  "    const totalTime = ",
                  "        pm.collectionVariables.get('cursor_time') +",
                  "        pm.collectionVariables.get('payment_time') +",
                  "        pm.collectionVariables.get('kpi_time') +",
                  "        pm.collectionVariables.get('customer_time');",
                  "    ",
                  "    pm.expect(totalTime).to.be.below(80);",
                  "    console.log(`✅ Total time: ${totalTime}ms (target: <80ms)`);",
                  "});",
                  "",
                  "// Calculate improvement factor",
                  "const originalTime = 790; // 50ms + 200ms + 300ms + 250ms",
                  "const totalTime = ",
                  "    pm.collectionVariables.get('cursor_time') +",
                  "    pm.collectionVariables.get('payment_time') +",
                  "    pm.collectionVariables.get('kpi_time') +",
                  "    pm.collectionVariables.get('customer_time');",
                  "",
                  "const improvementFactor = originalTime / totalTime;",
                  "console.log(`✅ Overall improvement: ${improvementFactor.toFixed(1)}x faster`);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Initialize timing variables",
                  "pm.collectionVariables.set('cursor_time', 0);",
                  "pm.collectionVariables.set('payment_time', 0);",
                  "pm.collectionVariables.set('kpi_time', 0);",
                  "pm.collectionVariables.set('customer_time', 0);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "Load Testing",
      "item": [
        {
          "name": "Concurrent Pagination Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time acceptable under load', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(50);",
                  "});",
                  "",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Track success rate",
                  "const successCount = pm.collectionVariables.get('success_count') || 0;",
                  "pm.collectionVariables.set('success_count', successCount + 1);",
                  "",
                  "console.log(`✅ Load test request succeeded: ${pm.response.responseTime}ms`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/bookings?limit=20",
              "host": ["{{base_url}}"],
              "path": ["api", "bookings"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "admin_token",
      "value": "your_admin_token_here",
      "type": "string"
    },
    {
      "key": "test_customer_email",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "next_cursor",
      "value": "",
      "type": "string"
    },
    {
      "key": "first_page_ids",
      "value": "",
      "type": "string"
    },
    {
      "key": "start_date",
      "value": "",
      "type": "string"
    },
    {
      "key": "end_date",
      "value": "",
      "type": "string"
    },
    {
      "key": "cursor_time",
      "value": "0",
      "type": "number"
    },
    {
      "key": "payment_time",
      "value": "0",
      "type": "number"
    },
    {
      "key": "kpi_time",
      "value": "0",
      "type": "number"
    },
    {
      "key": "customer_time",
      "value": "0",
      "type": "number"
    },
    {
      "key": "success_count",
      "value": "0",
      "type": "number"
    }
  ]
}
